package com.resort.ResortManagementProject.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.resort.ResortManagementProject.entity.Booking;
import com.resort.ResortManagementProject.entity.Room;
import com.resort.ResortManagementProject.entity.User;
import com.resort.ResortManagementProject.service.BookingService;
import com.resort.ResortManagementProject.service.RoomService;
import com.resort.ResortManagementProject.service.UserService;

@CrossOrigin(origins = "*",allowedHeaders = "*")
@RestController
@RequestMapping("/booking")
public class BookingController {
	@Autowired
	private BookingService bookingService;
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private RoomService roomService;
	
	@GetMapping("/getAllBooking")
	 public List<Booking> getAllBookings() {
		System.out.println(bookingService.getAllBookings());
		 return bookingService.getAllBookings();
	 }
	
	 
	@GetMapping("/getBooking/{id}")
	 public Booking getBookingById(@PathVariable int id) {
		Optional<Booking> booking=bookingService.getBookingById(id);
		Booking bookingById=null;
		if(booking!=null) {
			bookingById=booking.get();
			return bookingById;
		}
		else {
			return bookingById;
		}
	 }
	
	@PostMapping("/addBooking")
	public ResponseEntity<Booking> addBooking(@RequestBody Booking newBooking) {
	    try {
	        // Retrieve the User and Room entities based on their IDs
	       
	        
	        // Set the retrieved User and Room entities in the new booking
	        newBooking.setUser(newBooking.getUser());
	        newBooking.setRoom(newBooking.getRoom()));
	        
	        // Add the booking
	        Booking savedBooking = bookingService.addBooking(newBooking);
	        
	        return ResponseEntity.ok(savedBooking);
	    } catch (Exception e) {
	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
	    }
	}
}
