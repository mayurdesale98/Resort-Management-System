package com.resort.ResortManagementProject.controller;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.resort.ResortManagementProject.entity.Student;
import com.resort.ResortManagementProject.service.StudentService;

import jakarta.annotation.Resource;





@RestController
public class HomeController {
	
	@Autowired
	private StudentService studentService;
	
	public static String uploadDirectory = System.getProperty("user.dir")+"\\src\\main\\webapp\\images";
	
	//saving student in database
	@PostMapping("/saveData")
	public Student saveStudent(@ModelAttribute Student student, @RequestParam("image") MultipartFile file) throws IOException {
		String originalFilename = file.getOriginalFilename();
		Path fileNameAndPath=Paths.get(uploadDirectory, originalFilename);
		Files.write(fileNameAndPath, file.getBytes());
		student.setProfileImage(originalFilename);
		Student saveStudentData= studentService.saveStudentData(student);
		return saveStudentData;
	}
	
//	 @GetMapping("/student/AllStudentData")
//	    public ResponseEntity<List<StudentWithImage>> getAllStudentDataWithImages() throws IOException {
//	        List<StudentWithImage> allStudentsWithImages = studentService.getAllStudentDataWithImages();
//	        return ResponseEntity.ok().body(allStudentsWithImages);
//	    }

	    // Other methods...

	    // Define a DTO class to hold student details along with their images
	    public class StudentWithImage {
	        private Student student;
	        private Resource image;

	        public StudentWithImage(Student student, Resource image) {
	            this.student = student;
	            this.image = image;
	        }

			public Student getStudent() {
				return student;
			}

			public void setStudent(Student student) {
				this.student = student;
			}

			public Resource getImage() {
				return image;
			}

			public void setImage(Resource image) {
				this.image = image;
			}
			
			
	        
	    }
}